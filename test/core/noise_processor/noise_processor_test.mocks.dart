// Mocks generated by Mockito 5.4.4 from annotations
// in mesmerizr/test/core/noise_processor/noise_processor_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:typed_data' as _i5;

import 'package:mesmerizr/core/isolate_processor/isolate_processor.dart' as _i6;
import 'package:mesmerizr/core/noise_generators/base_noise_generator.dart'
    as _i3;
import 'package:mesmerizr/core/parameters/noise_generator_parameters.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNoiseGeneratorParameters_0 extends _i1.SmartFake
    implements _i2.NoiseGeneratorParameters {
  _FakeNoiseGeneratorParameters_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BaseNoiseGenerator].
///
/// See the documentation for Mockito's code generation for more information.
class MockBaseNoiseGenerator extends _i1.Mock
    implements _i3.BaseNoiseGenerator {
  MockBaseNoiseGenerator() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  _i2.NoiseGeneratorParameters get parameters => (super.noSuchMethod(
        Invocation.getter(#parameters),
        returnValue: _FakeNoiseGeneratorParameters_0(
          this,
          Invocation.getter(#parameters),
        ),
      ) as _i2.NoiseGeneratorParameters);

  @override
  _i5.Float64List generateNoise(
    int? sampleRate,
    int? bufferSize,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateNoise,
          [
            sampleRate,
            bufferSize,
          ],
        ),
        returnValue: _i5.Float64List(0),
      ) as _i5.Float64List);

  @override
  void updateParameters(_i2.NoiseGeneratorParameters? newParameters) =>
      super.noSuchMethod(
        Invocation.method(
          #updateParameters,
          [newParameters],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Float64List applyFilters(
    _i5.Float64List? buffer,
    int? sampleRate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #applyFilters,
          [
            buffer,
            sampleRate,
          ],
        ),
        returnValue: _i5.Float64List(0),
      ) as _i5.Float64List);

  @override
  _i5.Uint8List convertToUint8(_i5.Float64List? buffer) => (super.noSuchMethod(
        Invocation.method(
          #convertToUint8,
          [buffer],
        ),
        returnValue: _i5.Uint8List(0),
      ) as _i5.Uint8List);

  @override
  _i5.Uint8List generateCompleteSample(
    int? sampleRate,
    int? bufferSize,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateCompleteSample,
          [
            sampleRate,
            bufferSize,
          ],
        ),
        returnValue: _i5.Uint8List(0),
      ) as _i5.Uint8List);
}

/// A class which mocks [IsolateProcessor].
///
/// See the documentation for Mockito's code generation for more information.
class MockIsolateProcessor extends _i1.Mock implements _i6.IsolateProcessor {
  MockIsolateProcessor() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> start(_i6.IsolateFunction? isolateFunction) =>
      (super.noSuchMethod(
        Invocation.method(
          #start,
          [isolateFunction],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  void listen(void Function(dynamic)? onData) => super.noSuchMethod(
        Invocation.method(
          #listen,
          [onData],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<void> send(dynamic message) => (super.noSuchMethod(
        Invocation.method(
          #send,
          [message],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> stop() => (super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}
